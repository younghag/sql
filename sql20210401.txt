-- *은 모든 열 이라는 의미로 사용된다.
SELECT *
FROM employees -- 명령어는 대문자로 사용;



SELECT employee_id, first_name, last_name
FROM employees;
-- select 뒤의 열들만 조회
-- 명령어는 대문자 나머지는 소문자로 작성 권장

SELECT employee_id AS 사원번호, first_name AS 이름, last_name AS 성

FROM employees
--as 를 이용하여 이름병경

SELECT employee_id, first_name || last_name

FROM employees;



--두 개열을 붙여서 하나의 데이터 값으로 나타낸다.

SELECT employee_id AS 사원번호,
        salary AS 급여, 
        salary+500 AS 추가급여,
        salary-100 AS 인하급여,
        (salary* 1.1)/2 AS 조정급여,
        
FROM employees;

--새로운 열을 생성하는 것이 아니라 보여만 주는 것이다.
SELECT *

FROM employees

WHERE employee_id = 100;

--아이디가 100 인 사람의 정보만 출력

SELECT *

FROM employees

WHERE first_name = 'David';

-- first_name 에서 David만 추출
SELECT *

FROM employees

WHERE employee_id  >= 105;

-- employee_id 에서 105 이상만 추출

SELECT *
FROM employees
WHERE salary BETWEEN 10000 and 20000;

--Between a AND b, a와 b 사이의 수 >= <=

SELECT *
FROM employees
WHERE salary IN(10000,17000, 24000);

--IN =와 유사하지만 =은 하나만 조건으로 지정하고
--IN은 값을 여러개 설정

SELECT *
FROM employees
WHERE job_id LIKE 'AD%'

-- LIKE는 명확하지 않은 조건으로 찾을때
-- ~처럼 ~같은
-- 조건에는 문자나 숫자를 포함할 수 있다.
-- % 모든 문자 _ 한글자라는 의미

SELECT *
FROM employees
WHERE manager_id IS NULL;


--데이터 값이 null 인경우를조회
--0 이나 공백이 아닌 아무것도 없는 값이 null

SELECT *
FROM employees
WHERE salary > 4000
AND job_id = 'IT_PROG';


-- 조건을 모두 충족하는 데이터를 검색
-- AND를 계속 붙여 추가할 수 있다.

SELECT *
FROM employees
WHERE salary > 4000
AND job_id = 'IT_PROG'
OR job_id = 'FI_ACCOUNT';

-- 조건을 모두 충족하는 데이터를 검색
-- AND를 계속 붙여 추가할 수 있다.

SELECT *
FROM employees
WHERE employee_id <> 105;
-- <>아니다. !=

SELECT *
FROM employees
WHERE manager_id IS NOT NULL
-- IS NULL, <> IS NOT NULL

SELECT last_name,
        LOWER(last_name) LOWER적용,
        UPPER(last_name) UPPER적용,
        email,
        INITCAP(email) INITCAP적용
        
FROM employees;


-- employee 테이블에서 last_name을 소문자와 대문자로 출력
-- email은 첫 글자만 대문자로 출력

SELECT job_id,
        SUBSTR(job_id,1,2)
        
FROM employees;


-- employee 테이블에서 job_id값의 첫 자리부터 두개 문자 출력

SELECT job_id,
        REPLACE(job_id,'ACCOUNT','ACCNT') 적용결과
        
FROM employees;


-- employee 테이블에서 ACCOUNT값을 ACCNT로 변환, 그 표 이름을 적용결과로 바꿈

SELECT first_name,
        LPAD(first_name, 12, '*') 적용결과
        
FROM employees;


-- employee 테이블에서 first_name 값에서 12자리로 만들고 나머지를 
-- 어떤 문자로 채운다.(* 또는 ' ') (왼쪽으로)


SELECT job_id,
        LTRIM(job_id, 'F') LTRIM_적용결과,
        RTRIM(job_id, 'T') RTRIM_적용결과
FROM employees;


-- 글자를 만나면 삭제


SELECT TRIM('      빅 데이터      ')

FROM dual;

--앞뒤 여백 강제제거
